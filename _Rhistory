e = rnorm(n, .5, 1)
#monte carlo
n = 1000 #size of sample
e = rnorm(n, .5, 1)
plot(e, type='l')
for (ii in 2:n) {
e[ii] = rnorm(1,e[ii-1],1)
}
plot(e, type='l')
#Metropolis Hastings
#prior
theta = 1
beta(theta,1,1)
dbeta(theta,1,1)
pbeta(theta,1,1)
qbeta(theta,1,1)
x <- seq(0, 1, length = 21)
x
#Metropolis Hastings
#prior
theta = 0.2
qbeta(theta,1,1)
theta = seq(0,1,by=.01)
qbeta1 = qbeta(theta,1,1)
plot(theta,qbeta1)
dbeta(x, 1, 1)
pbeta(x, 1, 1)
## Visualization, including limit cases:
pl.beta <- function(a,b, asp = if(isLim) 1, ylim = if(isLim) c(0,1.1)) {
if(isLim <- a == 0 || b == 0 || a == Inf || b == Inf) {
eps <- 1e-10
x <- c(0, eps, (1:7)/16, 1/2+c(-eps,0,eps), (9:15)/16, 1-eps, 1)
} else {
x <- seq(0, 1, length = 1025)
}
fx <- cbind(dbeta(x, a,b), pbeta(x, a,b), qbeta(x, a,b))
f <- fx; f[fx == Inf] <- 1e100
matplot(x, f, ylab="", type="l", ylim=ylim, asp=asp,
main = sprintf("[dpq]beta(x, a=%g, b=%g)", a,b))
abline(0,1,     col="gray", lty=3)
abline(h = 0:1, col="gray", lty=3)
legend("top", paste0(c("d","p","q"), "beta(x, a,b)"),
col=1:3, lty=1:3, bty = "n")
invisible(cbind(x, fx))
}
pl.beta(3,1)
pl.beta(2, 4)
pl.beta(3, 7)
pl.beta(3, 7, asp=1)
pl.beta(0, 0)   ## point masses at  {0, 1}
pl.beta(0, 2)   ## point mass at 0 ; the same as
pl.beta(1, Inf)
pl.beta(Inf, 2) ## point mass at 1 ; the same as
pl.beta(3, 0)
pl.beta(Inf, Inf)# point mass at 1/2
pl.beta(3,1)
pnorm(0)
pnorm(1)
pnorm(2)
dnorm(2)
dnorm(0)
x = seq(-2,2,by=.01)
aux_norm = dnorm(x)
plot(x, aux_norm, type='l')
dbeta1 = dbeta(theta,1,1)
plot(theta,dbeta1)
dbinom(x,10,.4)
x = 1:10
dbinom(x,10,.4)
aux_dbinom1 = dbinom(x,10,.4)
plot(x, aux_dbinom1)
plot(x, aux_dbinom1, type='l')
theta=.2
dbinom(4,10,theta)
#beta distribution
theta = 0.2
#beta distribution
theta = seq(0,1,by=.01)
dbeta1 = dbeta(theta,1,1)
plot(theta,dbeta1)
theta = .2
prior = dbeta(theta,1,1)*dbinom(4,10,theta)
theta = .2
prior = dbeta(theta,1,1)*dbinom(4,10,theta)
prior
theta = double()
theta[1] = .2  #theta inicial
theta = double()
theta[1] = .2  #initial value for theta, we could use a uniform for this.
n
jj=1
theta[jj] = rnorm(theta[jj-1],.5)
jj=2
theta[1] = .2  #initial value for theta, we could use a uniform for this.
theta[jj] = rnorm(theta[jj-1],.5)
theta[jj]
theta[jj] = rnorm(1,theta[jj-1],.5)
theta[jj]
posterior_new = double()
posterior_old = double()
jj
theta = double()
theta[1] = .2  #initial value for theta, we could use a uniform for this.
posterior_new = double()
posterior_old = double()
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
theta[1] = runif(1)  #initial value for theta
posterior_new = double()
posterior_old = double()
posterior_old
theta[jj-1]
theta[jj] = rnorm(1,theta[jj-1],.5)
theta[jj]
posterior_new[jj] = dbeta(theta[jj],1,1)*dbinom(4,10,theta[jj])
posterior_old[jj] = dbeta(theta[jj-1],1,1)*dbinom(4,10,theta[jj-1])
ratio[jj] = posterior_new[jj]/posterior_old[jj]
ratio = double()
ratio[jj] = posterior_new[jj]/posterior_old[jj]
ratio[jj]
theta[jj]
jj
ratio[jj]
alpha = min(ratio[jj],1)
alpha
runif(1)>alpha
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
jj+1
jj
jj
jj-1
for (jj in 2:n) {
theta[jj] = rnorm(1, theta[jj-1] , .5)
posterior_new[jj] = dbeta(theta[jj],1,1)*dbinom(4,10,theta[jj])
posterior_old[jj] = dbeta(theta[jj-1],1,1)*dbinom(4,10,theta[jj-1])
ratio[jj] = posterior_new[jj]/posterior_old[jj]
alpha = min(ratio[jj],1)
if (runif(1) < alpha) {
theta[jj] = theta[jj]
}
theta[jj] = theta[jj-1]
}
theta = double()
theta[1] = runif(1)  #initial value for theta
posterior_new = double()
posterior_old = double()
ratio = double()
for (jj in 2:n) {
theta
theta = double()
theta[1] = runif(1)  #initial value for theta
posterior_new = double()
posterior_old = double()
ratio = double()
theta
n=10
for (jj in 2:n) {
theta[jj] = rnorm(1, theta[jj-1] , .5)
posterior_new[jj] = dbeta(theta[jj],1,1)*dbinom(4,10,theta[jj])
posterior_old[jj] = dbeta(theta[jj-1],1,1)*dbinom(4,10,theta[jj-1])
ratio[jj] = posterior_new[jj]/posterior_old[jj]
alpha = min(ratio[jj],1)
if (runif(1) < alpha) {
theta[jj] = theta[jj]
}
theta[jj] = theta[jj-1]
}
theta
theta = double()
theta[1] = runif(1)  #initial value for theta
posterior_new = double()
posterior_old = double()
ratio = double()
jj=1
jj=2
theta[jj] = rnorm(1, theta[jj-1] , .5)
theta
theta[jj]
posterior_new[jj] = dbeta(theta[jj],1,1)*dbinom(4,10,theta[jj])
posterior_old[jj] = dbeta(theta[jj-1],1,1)*dbinom(4,10,theta[jj-1])
posterior_new
posterior_new
ratio[jj] = posterior_new[jj]/posterior_old[jj]
ratio
ratio[jj]
1
alpha = min(ratio[jj],1)
alpha
runif(1) < alpha
theta[jj] = theta[jj-1]
theta[jj]
for (jj in 2:n) {
theta[jj] = rnorm(1, theta[jj-1] , .5)
posterior_new[jj] = dbeta(theta[jj],1,1)*dbinom(4,10,theta[jj])
posterior_old[jj] = dbeta(theta[jj-1],1,1)*dbinom(4,10,theta[jj-1])
ratio[jj] = posterior_new[jj]/posterior_old[jj]
alpha = min(ratio[jj],1)
if (runif(1) >= alpha) {
theta[jj] = theta[jj-1]
}
}
theta = double()
theta[1] = runif(1)  #initial value for theta
posterior_new = double()
posterior_old = double()
ratio = double()
for (jj in 2:n) {
theta[jj] = rnorm(1, theta[jj-1] , .5)
posterior_new[jj] = dbeta(theta[jj],1,1)*dbinom(4,10,theta[jj])
posterior_old[jj] = dbeta(theta[jj-1],1,1)*dbinom(4,10,theta[jj-1])
ratio[jj] = posterior_new[jj]/posterior_old[jj]
alpha = min(ratio[jj],1)
print(alpha)
if (runif(1) >= alpha) {
theta[jj] = theta[jj-1]
}
}
theta = double()
theta[1] = runif(1)  #initial value for theta
posterior_new = double()
posterior_old = double()
ratio = double()
jj=2
theta[jj] = rnorm(1, theta[jj-1] , .5)
theta
posterior_new[jj] = dbeta(theta[jj],1,1)*dbinom(4,10,theta[jj])
posterior_new
posterior_old[jj] = dbeta(theta[jj-1],1,1)*dbinom(4,10,theta[jj-1])
posterior_old
posterior_new[jj]
posterior_old[jj]
ratio[jj]
ratio
ratio[jj] = posterior_new[jj]/posterior_old[jj]
ratio
alpha = min(ratio[jj],1)
alpha
print(alpha)
if (runif(1) >= alpha) {
theta[jj] = theta[jj-1]
}
runif(1) >= alpha
theta
for (jj in 2:n) {
theta[jj] = rnorm(1, theta[jj-1] , .5)
posterior_new[jj] = dbeta(theta[jj],1,1)*dbinom(4,10,theta[jj])
posterior_old[jj] = dbeta(theta[jj-1],1,1)*dbinom(4,10,theta[jj-1])
ratio[jj] = posterior_new[jj]/posterior_old[jj]
alpha = min(ratio[jj],1)
print(alpha)
if (runif(1) >= alpha) {
theta[jj] = theta[jj-1]
}
}
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
theta = double()
theta[1] = runif(1)  #initial value for theta
posterior_new = double()
posterior_old = double()
ratio = double()
for (jj in 2:n) {
theta[jj] = rnorm(1, theta[jj-1] , .5)
posterior_new[jj] = dbeta(theta[jj],1,1)*dbinom(4,10,theta[jj])
posterior_old[jj] = dbeta(theta[jj-1],1,1)*dbinom(4,10,theta[jj-1])
if (posterior_old[jj]==0){
print('posterior old is zero')
}
ratio[jj] = posterior_new[jj]/posterior_old[jj]
alpha = min(ratio[jj],1)
print(alpha)
if (runif(1) >= alpha) {
theta[jj] = theta[jj-1]
}
}
posterior_old
posterior_new
theta
theta
theta[jj]<0
theta = double()
theta[1] = runif(1)  #initial value for theta
posterior_new = double()
posterior_old = double()
ratio = double()
for (jj in 2:n) {
theta[jj] = rnorm(1, theta[jj-1] , .5)
posterior_new[jj] = dbeta(theta[jj],1,1)*dbinom(4,10, theta[jj])
posterior_old[jj] = dbeta(theta[jj-1],1,1)*dbinom(4,10,theta[jj-1])
if (posterior_old[jj]==0){
print('posterior old is zero')
}
ratio[jj] = posterior_new[jj]/posterior_old[jj]
alpha = min(ratio[jj],1)
print(alpha)
if (runif(1) >= alpha) {
theta[jj] = theta[jj-1]
}
if (theta[jj]<0){
theta[jj]=0
}
}
theta
theta
theta = double()
theta[1] = runif(1)  #initial value for theta
posterior_new = double()
posterior_old = double()
ratio = double()
for (jj in 2:n) {
theta[jj] = rnorm(1, theta[jj-1] , .1)
if (theta[jj]<0){theta[jj]=0}
posterior_new[jj] = dbeta(theta[jj],1,1)*dbinom(4,10, theta[jj])
posterior_old[jj] = dbeta(theta[jj-1],1,1)*dbinom(4,10,theta[jj-1])
if (posterior_old[jj]==0){
print('posterior old is zero')
}
ratio[jj] = posterior_new[jj]/posterior_old[jj]
alpha = min(ratio[jj],1)
print(alpha)
if (runif(1) >= alpha) {
theta[jj] = theta[jj-1]
}
}
theta
theta = double()
theta[1] = runif(1)  #initial value for theta
posterior_new = double()
posterior_old = double()
ratio = double()
for (jj in 2:n) {
theta[jj] = rnorm(1, theta[jj-1] , .1)
if (theta[jj]<0){theta[jj]=0}
posterior_new[jj] = dbeta(theta[jj],1,1)*dbinom(4,10, theta[jj])
posterior_old[jj] = dbeta(theta[jj-1],1,1)*dbinom(4,10,theta[jj-1])
ratio[jj] = posterior_new[jj]/posterior_old[jj]
alpha = min(ratio[jj],1)
if (runif(1) >= alpha) {
theta[jj] = theta[jj-1]
}
print(theta[jj])
}
n=1000
for (jj in 2:n) {
theta[jj] = rnorm(1, theta[jj-1] , .1)
if (theta[jj]<0){theta[jj]=0}
posterior_new[jj] = dbeta(theta[jj],1,1)*dbinom(4,10, theta[jj])
posterior_old[jj] = dbeta(theta[jj-1],1,1)*dbinom(4,10,theta[jj-1])
ratio[jj] = posterior_new[jj]/posterior_old[jj]
alpha = min(ratio[jj],1)
if (runif(1) >= alpha) {
theta[jj] = theta[jj-1]
}
#print(theta[jj])
}
hist(theta)
0.99*.005+.01*.995
(.99*.005)/(0.99*.005+.01*.995)
(.99*.005)/(0.99*.005+.01*.995)-1
(.01*.995)/(0.99*.005+.01*.995)
(.99*.001)/(.99*.001+.01*.999)
#what is the probability that I have the desease given that
#the test was positive
first_test = (.99*.001)/(.99*.001+.01*.999)
second_test = (.99*first_test)/(.99*.001+.01*.999); second_test
#what is the probability that I have the desease given that
#the test was positive
first_test = (.99*.001)/(.99*.001+.01*.999); first_test
second_test = (.99*first_test)/(.99*.001+.01*.999); second_test
first_test
.99*first_test
(.99*.001+.01*.999)
second_test = (.99*first_test)/(.99*first_test+.01*(1-first_test)); second_test
